#include <bits/stdc++.h>
#include <conio.h>
#include <Windows.h>

using namespace std;

// Console colors
enum ConsoleColor {
    BLACK = 0, BLUE = 1, GREEN = 2, CYAN = 3, RED = 4, MAGENTA = 5, BROWN = 6, LIGHTGRAY = 7,
    DARKGRAY = 8, LIGHTBLUE = 9, LIGHTGREEN = 10, LIGHTCYAN = 11, LIGHTRED = 12, LIGHTMAGENTA = 13, YELLOW = 14, WHITE = 15
};

// Constants
const int BOARD_WIDTH = 10;
const int BOARD_HEIGHT = 20;
const int TETROMINO_SIZE = 4;
const int INITIAL_FALLING_SPEED = 500; // ms
const int SPEED_INCREASE_AFTER_LINES = 10;
const int SPEED_INCREASE_AMOUNT = 50; // ms
const int PREVIEW_POS_X = BOARD_WIDTH * 2 + 5; // Adjusted for the border shift
const int PREVIEW_POS_Y = 2;
const int INFO_POS_X = BOARD_WIDTH * 2 + 5; // Adjusted for the border shift
const int INFO_POS_Y = 10;

// Block characters
const char BLOCK_CHAR = 219; // Full block character
const char GHOST_CHAR = 176; // Light shade block for ghost piece

// Game board and display buffer
vector<vector<int>> board(BOARD_HEIGHT, vector<int>(BOARD_WIDTH, 0));
CHAR_INFO consoleBuffer[BOARD_HEIGHT + 2][BOARD_WIDTH * 2 + 31]; // +1 for shifted border

// Tetromino shapes (I, O, T, S, Z, J, L)
const vector<vector<vector<int>>> TETROMINOS = {
    {{0,0,0,0}, {1,1,1,1}, {0,0,0,0}, {0,0,0,0}}, // I
    {{0,0,0,0}, {0,2,2,0}, {0,2,2,0}, {0,0,0,0}}, // O 
    {{0,0,0,0}, {0,3,0,0}, {3,3,3,0}, {0,0,0,0}}, // T
    {{0,0,0,0}, {0,4,4,0}, {4,4,0,0}, {0,0,0,0}}, // S
    {{0,0,0,0}, {5,5,0,0}, {0,5,5,0}, {0,0,0,0}}, // Z
    {{0,0,0,0}, {6,0,0,0}, {6,6,6,0}, {0,0,0,0}}, // J
    {{0,0,0,0}, {0,0,7,0}, {7,7,7,0}, {0,0,0,0}}  // L
};

// Colors for each tetromino type
const ConsoleColor TETROMINO_COLORS[] = {
    BLACK, LIGHTCYAN, YELLOW, LIGHTMAGENTA, LIGHTGREEN, LIGHTRED, LIGHTBLUE, BROWN
};

// Console utility functions
void setCursorPosition(int x, int y) {
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), {static_cast<SHORT>(x), static_cast<SHORT>(y)});
}

void setConsoleColor(ConsoleColor foreground, ConsoleColor background = BLACK) {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), (background << 4) | foreground);
}

void hideCursor() {
    CONSOLE_CURSOR_INFO cursorInfo = {100, FALSE};
    SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursorInfo);
}

// Buffer manipulation functions
void writeToBuffer(int x, int y, char ch, WORD attributes) {
    if (y >= 0 && y < BOARD_HEIGHT + 2 && x >= 0 && x < BOARD_WIDTH * 2 + 31) { // Updated buffer size
        consoleBuffer[y][x].Char.AsciiChar = ch;
        consoleBuffer[y][x].Attributes = attributes;
    }
}

void writeStringToBuffer(int x, int y, const string& text, WORD attributes) {
    for (size_t i = 0; i < text.length(); i++) {
        writeToBuffer(x + i, y, text[i], attributes);
    }
}

void renderBuffer() {
    COORD bufferSize = {BOARD_WIDTH * 2 + 31, BOARD_HEIGHT + 2}; // Updated buffer size
    SMALL_RECT writeRegion = {0, 0, BOARD_WIDTH * 2 + 30, BOARD_HEIGHT + 1}; // Updated write region
    WriteConsoleOutput(GetStdHandle(STD_OUTPUT_HANDLE), (CHAR_INFO*)consoleBuffer, bufferSize, {0, 0}, &writeRegion);
}

void clearBuffer() {
    for (int y = 0; y < BOARD_HEIGHT + 2; y++)
        for (int x = 0; x < BOARD_WIDTH * 2 + 31; x++) { // Updated buffer size
            consoleBuffer[y][x].Char.AsciiChar = ' ';
            consoleBuffer[y][x].Attributes = WHITE;
        }
}

// Game class
class TetrisGame {
private:
    vector<vector<int>> currentTetromino, nextTetromino;
    int currentX, currentY, currentTetrominoType, nextTetrominoType;
    int ghostY;  // Y position for ghost piece
    int score, highScore, level, linesCleared, fallingSpeed;
    bool gameOver, exitGame;
    bool isFalling; // Flag to track if piece is still falling
    mt19937 gen;

public:
    TetrisGame() : gen(random_device()()) {
        highScore = 0;
        exitGame = false;
        resetGame();
    }

    void resetGame() {
        // Clear the board
        for (auto& row : board)
            fill(row.begin(), row.end(), 0);
        
        score = 0;
        level = 1;
        linesCleared = 0;
        fallingSpeed = INITIAL_FALLING_SPEED;
        gameOver = false;
        isFalling = true;
        
        generateNextTetromino();
        spawnTetromino();
        updateGhostPiece();
    }

    void generateNextTetromino() {
        nextTetrominoType = uniform_int_distribution<>(0, TETROMINOS.size() - 1)(gen);
        nextTetromino = TETROMINOS[nextTetrominoType];
    }

    void spawnTetromino() {
        currentTetrominoType = nextTetrominoType;
        currentTetromino = nextTetromino;
        generateNextTetromino();
        
        currentX = BOARD_WIDTH / 2 - 2;
        currentY = 0;
        isFalling = true;
        
        if (!isValidPosition()) {
            gameOver = true;
            highScore = max(highScore, score);
        }
    }

    bool isValidPosition(int testX = -1, int testY = -1, const vector<vector<int>>* tetromino = nullptr) {
        if (testX == -1) testX = currentX;
        if (testY == -1) testY = currentY;
        if (tetromino == nullptr) tetromino = &currentTetromino;
        
        for (int y = 0; y < TETROMINO_SIZE; y++) {
            for (int x = 0; x < TETROMINO_SIZE; x++) {
                if ((*tetromino)[y][x] != 0) {
                    int boardX = testX + x;
                    int boardY = testY + y;
                    
                    if (boardX < 0 || boardX >= BOARD_WIDTH || 
                        boardY < 0 || boardY >= BOARD_HEIGHT || 
                        (boardY >= 0 && board[boardY][boardX] != 0)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    void updateGhostPiece() {
        ghostY = currentY;
        
        // Find the lowest valid position
        while (isValidPosition(currentX, ghostY + 1)) {
            ghostY++;
        }
    }

    void rotateTetromino() {
        // Special case for O tetromino: don't rotate the separate squares
        if (currentTetrominoType == 1) { // O tetromino
            return;
        }
        
        vector<vector<int>> originalTetromino = currentTetromino;
        vector<vector<int>> rotatedTetromino(TETROMINO_SIZE, vector<int>(TETROMINO_SIZE, 0));
        
        // Rotate 90Â° clockwise
        for (int y = 0; y < TETROMINO_SIZE; y++)
            for (int x = 0; x < TETROMINO_SIZE; x++)
                rotatedTetromino[x][TETROMINO_SIZE - 1 - y] = currentTetromino[y][x];
        
        currentTetromino = rotatedTetromino;
        
        // Wall kicks
        if (!isValidPosition()) {
            currentX++; // Try right
            if (!isValidPosition()) {
                currentX -= 2; // Try left
                if (!isValidPosition()) {
                    currentX++; // Center X
                    currentY--; // Try up
                    if (!isValidPosition()) {
                        currentY++; // Revert
                        currentTetromino = originalTetromino; // Revert rotation
                    }
                }
            }
        }
        
        updateGhostPiece();
    }

    void moveLeft() {
        currentX--;
        if (!isValidPosition())
            currentX++;
        else
            updateGhostPiece();
    }

    void moveRight() {
        currentX++;
        if (!isValidPosition())
            currentX--;
        else
            updateGhostPiece();
    }

    bool moveDown() {
        currentY++;
        if (!isValidPosition()) {
            currentY--;
            mergeTetromino();
            isFalling = false;
            return false;
        }
        updateGhostPiece();
        return true;
    }

    void hardDrop() {
        while (moveDown())
            score += 2; // Bonus points
    }

    void mergeTetromino() {
        for (int y = 0; y < TETROMINO_SIZE; y++) {
            for (int x = 0; x < TETROMINO_SIZE; x++) {
                if (currentTetromino[y][x] != 0) {
                    int boardY = currentY + y;
                    int boardX = currentX + x;
                    if (boardY >= 0 && boardY < BOARD_HEIGHT && boardX >= 0 && boardX < BOARD_WIDTH)
                        board[boardY][boardX] = currentTetromino[y][x];
                }
            }
        }
        
        checkLines();
        spawnTetromino();
        updateGhostPiece();
    }

    void checkLines() {
        int linesCompleted = 0;
        
        for (int y = BOARD_HEIGHT - 1; y >= 0; y--) {
            bool lineComplete = true;
            
            for (int x = 0; x < BOARD_WIDTH; x++) {
                if (board[y][x] == 0) {
                    lineComplete = false;
                    break;
                }
            }
            
            if (lineComplete) {
                linesCompleted++;
                
                // Shift everything down
                for (int moveY = y; moveY > 0; moveY--)
                    for (int x = 0; x < BOARD_WIDTH; x++)
                        board[moveY][x] = board[moveY - 1][x];
                
                // Clear top line
                for (int x = 0; x < BOARD_WIDTH; x++)
                    board[0][x] = 0;
                
                y++; // Check this line again
            }
        }
        
        if (linesCompleted > 0) {
            score += 100 * level * linesCompleted * linesCompleted;
            linesCleared += linesCompleted;
            level = 1 + (linesCleared / SPEED_INCREASE_AFTER_LINES);
            fallingSpeed = max(100, INITIAL_FALLING_SPEED - (level - 1) * SPEED_INCREASE_AMOUNT);
        }
    }

    void drawTetromino(int type, const vector<vector<int>>& tetromino, int offsetX, int offsetY, bool isGhost = false) {
        for (int y = 0; y < TETROMINO_SIZE; y++) {
            for (int x = 0; x < TETROMINO_SIZE; x++) {
                if (tetromino[y][x] != 0) {
                    char blockChar = isGhost ? GHOST_CHAR : BLOCK_CHAR;
                    
                    // Add a border for square blocks if it's type 1 (the O tetromino)
                    if (type == 2) { // O tetromino (type+1 because we use 0 for empty cells)
                        // Each block takes 2 characters width
                        writeToBuffer((offsetX + x) * 2, offsetY + y, blockChar, TETROMINO_COLORS[type]);
                        writeToBuffer((offsetX + x) * 2 + 1, offsetY + y, blockChar, TETROMINO_COLORS[type]);
                    } else {
                        // Standard drawing for non-square blocks
                        writeToBuffer((offsetX + x) * 2, offsetY + y, blockChar, TETROMINO_COLORS[type]);
                        writeToBuffer((offsetX + x) * 2 + 1, offsetY + y, blockChar, TETROMINO_COLORS[type]);
                    }
                }
            }
        }
    }

    void drawNextTetromino() {
        writeStringToBuffer(PREVIEW_POS_X, PREVIEW_POS_Y - 1, "Next Piece:", WHITE);
        
        // Draw border
        writeToBuffer(PREVIEW_POS_X, PREVIEW_POS_Y, '+', WHITE);
        for (int x = 1; x < 9; x++)
            writeToBuffer(PREVIEW_POS_X + x, PREVIEW_POS_Y, '-', WHITE);
        writeToBuffer(PREVIEW_POS_X + 9, PREVIEW_POS_Y, '+', WHITE);
        
        for (int y = 1; y < 6; y++) {
            writeToBuffer(PREVIEW_POS_X, PREVIEW_POS_Y + y, '|', WHITE);
            writeToBuffer(PREVIEW_POS_X + 9, PREVIEW_POS_Y + y, '|', WHITE);
        }
        
        writeToBuffer(PREVIEW_POS_X, PREVIEW_POS_Y + 6, '+', WHITE);
        for (int x = 1; x < 9; x++)
            writeToBuffer(PREVIEW_POS_X + x, PREVIEW_POS_Y + 6, '-', WHITE);
        writeToBuffer(PREVIEW_POS_X + 9, PREVIEW_POS_Y + 6, '+', WHITE);
        
        // Since we draw with 2 chars per block, adjust the x offset for the preview
        drawTetromino(nextTetrominoType + 1, nextTetromino, (PREVIEW_POS_X + 1) / 2, PREVIEW_POS_Y + 1);
    }

    void drawBoard() {
        // Top border with +---+ style
        writeToBuffer(0, 0, '+', WHITE);
        for (int x = 1; x < BOARD_WIDTH * 2 + 1; x++) // +1 for the border shift
            writeToBuffer(x, 0, '-', WHITE);
        writeToBuffer(BOARD_WIDTH * 2 + 1, 0, '+', WHITE); // Shifted right border
        
        // Side borders and contents
        for (int y = 0; y < BOARD_HEIGHT; y++) {
            writeToBuffer(0, y + 1, '|', WHITE);
            
            for (int x = 0; x < BOARD_WIDTH; x++) {
                int cellValue = board[y][x];
                bool occupied = false;
                bool isGhostPiece = false;
                
                // Check if ghost piece is here
                if (cellValue == 0) {
                    for (int ty = 0; ty < TETROMINO_SIZE && !occupied; ty++) {
                        for (int tx = 0; tx < TETROMINO_SIZE && !occupied; tx++) {
                            if (currentTetromino[ty][tx] != 0 && ghostY + ty == y && currentX + tx == x) {
                                if (ghostY != currentY) { // Only show ghost if it's not at the same position as current
                                    isGhostPiece = true;
                                    cellValue = currentTetromino[ty][tx];
                                }
                            }
                        }
                    }
                }
                
                // Check if current tetromino is here
                if (cellValue == 0 || isGhostPiece) {
                    for (int ty = 0; ty < TETROMINO_SIZE && !occupied; ty++) {
                        for (int tx = 0; tx < TETROMINO_SIZE && !occupied; tx++) {
                            if (currentTetromino[ty][tx] != 0 && currentY + ty == y && currentX + tx == x) {
                                occupied = true;
                                isGhostPiece = false; // Current piece takes precedence over ghost
                                cellValue = currentTetromino[ty][tx];
                            }
                        }
                    }
                }
                
                if (occupied || isGhostPiece || cellValue != 0) {
                    char blockChar = isGhostPiece ? GHOST_CHAR : BLOCK_CHAR;
                    
                    // Special drawing for O tetromino (square blocks)
                    if (cellValue == 2) {
                        // Draw with border effect
                        ConsoleColor blockColor = TETROMINO_COLORS[cellValue];
                        writeToBuffer(x * 2 + 1, y + 1, blockChar, blockColor);
                        writeToBuffer(x * 2 + 2, y + 1, blockChar, blockColor);
                    } else {
                        // Normal blocks
                        writeToBuffer(x * 2 + 1, y + 1, blockChar, TETROMINO_COLORS[cellValue]);
                        writeToBuffer(x * 2 + 2, y + 1, blockChar, TETROMINO_COLORS[cellValue]);
                    }
                } else {
                    writeToBuffer(x * 2 + 1, y + 1, ' ', DARKGRAY);
                    writeToBuffer(x * 2 + 2, y + 1, ' ', DARKGRAY);
                }
            }
            
            writeToBuffer(BOARD_WIDTH * 2 + 1, y + 1, '|', WHITE); // Shifted right border
        }
        
        // Bottom border
        writeToBuffer(0, BOARD_HEIGHT + 1, '+', WHITE);
        for (int x = 1; x < BOARD_WIDTH * 2 + 1; x++) // +1 for the border shift
            writeToBuffer(x, BOARD_HEIGHT + 1, '-', WHITE);
        writeToBuffer(BOARD_WIDTH * 2 + 1, BOARD_HEIGHT + 1, '+', WHITE); // Shifted right border
    }

    void drawInfo() {
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y, "Score: " + to_string(score), WHITE);
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y + 1, "High: " + to_string(highScore), WHITE);
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y + 2, "Level: " + to_string(level), WHITE);
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y + 3, "Lines: " + to_string(linesCleared), WHITE);
        
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y + 5, "Controls:", WHITE);
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y + 6, "<-/->: Move", WHITE);
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y + 7, "^: Rotate", WHITE);
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y + 8, "v: Soft Drop", WHITE);
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y + 9, "Space: Hard Drop", WHITE);
        writeStringToBuffer(INFO_POS_X, INFO_POS_Y + 10, "ESC: Pause", WHITE);
    }

    void drawGameOver() {
        system("cls");
        clearBuffer();
        
        setConsoleColor(LIGHTRED);
        setConsoleColor(WHITE);
        cout << "\n Final Score: " << score << endl;
        cout << " High Score: " << highScore << endl;
        cout << " Lines Cleared: " << linesCleared << endl;
        cout << " Level Reached: " << level << endl;
        
        if (score == highScore && score > 0)
            cout << "\n NEW HIGH SCORE! Congratulations!" << endl;
        
        cout << "\n\n What would you like to do?" << endl;
        cout << " R - Restart" << endl;
        cout << " Q - Quit" << endl;
    }

    void showWelcomeScreen() {
        system("cls");
        setConsoleColor(LIGHTCYAN);
        setConsoleColor(WHITE);
        
        cout << "Welcome to Tetris!" << endl << endl;
        cout << "Controls:" << endl;
        cout << "- Arrow Keys: Move and rotate" << endl;
        cout << "- Space: Hard drop" << endl;
        cout << "- ESC: Pause game" << endl << endl;
        
        cout << "Press any key to start...";
        _getch();
    }

    bool showPauseMenu() {
        const int boxWidth = 20;
        const int boxHeight = 7;
        const int startX = (BOARD_WIDTH * 2 - boxWidth) / 2;
        const int startY = BOARD_HEIGHT / 2 - boxHeight / 2;
        
        clearBuffer();
        drawBoard();
        
        // Draw pause menu with improved borders
        writeToBuffer(startX, startY, '+', WHITE);
        for (int x = 1; x < boxWidth - 1; x++)
            writeToBuffer(startX + x, startY, '-', WHITE);
        writeToBuffer(startX + boxWidth - 1, startY, '+', WHITE);
        
        for (int y = 1; y < boxHeight - 1; y++) {
            writeToBuffer(startX, startY + y, '|', WHITE);
            for (int x = 1; x < boxWidth - 1; x++)
                writeToBuffer(startX + x, startY + y, ' ', WHITE);
            writeToBuffer(startX + boxWidth - 1, startY + y, '|', WHITE);
        }
        
        writeToBuffer(startX, startY + boxHeight - 1, '+', WHITE);
        for (int x = 1; x < boxWidth - 1; x++)
            writeToBuffer(startX + x, startY + boxHeight - 1, '-', WHITE);
        writeToBuffer(startX + boxWidth - 1, startY + boxHeight - 1, '+', WHITE);
        
        writeStringToBuffer(startX + (boxWidth - 11) / 2, startY + 1, "  GAME PAUSED", YELLOW);
        writeStringToBuffer(startX + 2, startY + 3, "  C - Continue", WHITE);
        writeStringToBuffer(startX + 2, startY + 4, "  R - Restart", WHITE);
        writeStringToBuffer(startX + 2, startY + 5, "  Q - Quit", WHITE);
        
        renderBuffer();
        
        bool continueGame = true;
        bool validInput = false;
        
        while (!validInput) {
            int key = _getch();
            switch (tolower(key)) {
                case 'c': validInput = true; break;
                case 'r':
                    validInput = true;
                    continueGame = false;
                    resetGame();
                    break;
                case 'q':
                    validInput = true;
                    continueGame = false;
                    exitGame = true;
                    break;
            }
        }
        
        return continueGame;
    }

    void handleGameOverInput() {
        bool validInput = false;
        
        while (!validInput) {
            int key = _getch();
            switch (tolower(key)) {
                case 'r':
                    validInput = true;
                    resetGame();
                    system("cls");
                    break;
                case 'q':
                    validInput = true;
                    exitGame = true;
                    break;
            }
        }
    }

    void handleInput() {
        if (_kbhit()) {
            int key = _getch();
            
            if (key == 224) { // Arrow keys
                key = _getch();
                switch (key) {
                    case 72: rotateTetromino(); break;  // Up
                    case 75: moveLeft(); break;         // Left
                    case 77: moveRight(); break;        // Right
                    case 80:                            // Down
                        if (moveDown()) score += 1;     // Soft drop bonus
                        break;
                }
            } else {
                switch (key) {
                    case 32: hardDrop(); break;         // Space
                    case 27:                            // ESC
                        if (!showPauseMenu()) return;
                        break;
                }
            }
        }
    }

    void update() {
        static auto lastFallTime = chrono::steady_clock::now();
        auto currentTime = chrono::steady_clock::now();
        auto elapsed = chrono::duration_cast<chrono::milliseconds>(currentTime - lastFallTime).count();
        
        if (elapsed > fallingSpeed) {
            moveDown();
            lastFallTime = currentTime;
        }
    }

    void draw() {
        clearBuffer();
        
        if (gameOver) {
            drawGameOver();
        } else {
            drawBoard();
            drawNextTetromino();
            drawInfo();
            renderBuffer();
        }
    }

    bool isGameOver() const { return gameOver; }
    bool shouldExitGame() const { return exitGame; }
};

int main() {
    system("cls");
    system("title Tetris");
    hideCursor();
    
    // Adjust buffer size because we're using 2 characters per cell now
    COORD bufferSize = {BOARD_WIDTH * 2 + 31, BOARD_HEIGHT + 2}; // Updated buffer size
    SetConsoleScreenBufferSize(GetStdHandle(STD_OUTPUT_HANDLE), bufferSize);
    
    TetrisGame game;
    game.showWelcomeScreen();
    
    system("cls");
    
    while (!game.shouldExitGame()) {
        if (game.isGameOver()) {
            game.draw();
            game.handleGameOverInput();
        } else {
            game.handleInput();
            game.update();
            game.draw();
            Sleep(50); // Prevent too rapid updates
        }
    }
    
    system("cls");
    setConsoleColor(LIGHTCYAN);
    
    // Display goodbye message
    cout << "\n Thanks for playing Tetris!" << endl;
    cout << " Hope you enjoyed the game!" << endl << endl;
    cout << " Press any key to exit...";
    _getch();
    
    // Reset console color before exiting
    setConsoleColor(WHITE);
    return 0;
}
